#!/bin/bash

# Create the config directory if it doesn't exist
mkdir -p config

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
ORANGE='\033[0;33m'
NC='\033[0m' # No Color

# Function to display help
show_help() {
  echo ""
  echo "Usage: ./quickstart -u <database username> -p <database password> -d <domain> [-P <database port>] [-i <protocol>]"
  echo ""
  echo "Options:"
  echo "  -u    Database user"
  echo "  -p    Database password"
  # echo "  -j    Open Balena jwt secret"
  echo "  -d    Domain"
  echo "  -P    Database port (optional, defaults to 5432)"
  echo "  -i    protocol, insecure or secure (optional, defaults to secure) => https"
  echo ""
}

# Function to check Docker and Docker Compose versions
check_docker_versions() {
    echo " Checking Docker version ..."
    if ! command -v docker &> /dev/null; then
        echo -e "${RED} Docker is not installed. Please install Docker before running this script.${NC}"
        exit 1
    fi
    DOCKER_VERSION=$(docker --version)
    # echo -e " Docker version found: ${GREEN}$DOCKER_VERSION${NC}"

    echo " Checking Docker Compose version ..."
    if ! command -v docker compose &> /dev/null; then
        echo -e "${RED} Docker Compose is not installed. Please install Docker Compose before running this script.${NC}"
        exit 1
    fi
    DOCKER_COMPOSE_VERSION=$(docker compose --version)
    # echo -e " Docker Compose version found: ${GREEN}$DOCKER_COMPOSE_VERSION${NC}"

    echo -e "\n Proceeding with setting the configurations ..."
}

# Function to generate a Django secret key
generate_secret_key() {
  python3 -c "from secrets import token_urlsafe; print(token_urlsafe(50))"
}

# Parse command-line arguments
while getopts "u:p:d:P:i:h" flag
do
    case "${flag}" in
        u) DATABASE_USER=${OPTARG};;
        p) DATABASE_PASSWORD=${OPTARG};;
        # j) DATABASE_JWT_SECRET=${OPTARG};;
        d) DATABASE_HOST=${OPTARG};;
        P) DATABASE_PORT=${OPTARG};;
        i) MODE=${OPTARG};;
        h) show_help; exit 0;;
        *) show_help; exit 1;;
    esac
done

# Set default database port if not provided
if [ -z "$DATABASE_PORT" ]; then
  DATABASE_PORT=5432
fi

# Set default mode to secure if not provided
if [ -z "$MODE" ]; then
  MODE="secure"
fi

# Validate inputs => removed for now || [ -z "$DATABASE_JWT_SECRET" ]
if [ -z "$DATABASE_USER" ] || [ -z "$DATABASE_PASSWORD" ] || [ -z "$DATABASE_HOST" ]; then
    echo -e "\nOops! Missing required arguments, perhaps you didn't follow the usage below: \n"
    echo -e "${ORANGE}Usage:${NC} $0 -u <database-user> -p <database-password> -d <domain> [-P <database-port>] [-i <mode>]\n\n"
    echo -e "i.e ${GREEN} $0 -u docker -p docker -d api.openbalena.local${NC}\n\n"
    exit 1
fi

SECRET_KEY=$(generate_secret_key)

# Determine protocol based on mode
if [ "$MODE" = "secure" ]; then
  PROTOCOL="https"
else
  PROTOCOL="http"
fi

# Check Docker and Docker Compose versions
check_docker_versions

# Write environment variables to a .env file => removed for now DATABASE_JWT_SECRET=$DATABASE_JWT_SECRET
cat <<EOF > ./config/.env
DATABASE_NAME=resin
DATABASE_USER=$DATABASE_USER
DATABASE_PASSWORD=$DATABASE_PASSWORD
DATABASE_HOST=$DATABASE_HOST
DATABASE_PORT=$DATABASE_PORT
SECRET_KEY=$SECRET_KEY
MODE=$MODE
PROTOCOL=$PROTOCOL
DEBUG=False
EOF

# Display a message indicating successful configuration
echo -e "${GREEN}\n ==> Success! you have set environment variables!${NC} \n\n"


# Echo ASCII art
cat << "EOF"

    _       _                                 
    (_) ___ | |_ _ __ ___   __ _ _ __      _   
    | |/ _ \| __| '_ ` _ \ / _` | '_ \   _| |_ 
    | | (_) | |_| | | | | | (_| | | | | |_   _|
    |_|\___/ \__|_| |_| |_|\__,_|_| |_|   |_|  
                                            


EOF

echo -e "\n\n Next, start Docker containers with the following command as root user: \n"
echo -e "${GREEN}  -> docker compose up${NC} \n"
echo -e " ${ORANGE}[optional] ${NC} you can add ${GREEN}'-d'${NC} to the command if you want to run the containers in background \n \n"